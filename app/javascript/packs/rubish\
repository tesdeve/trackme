/////////// BEFORE ADDING BUTTONS TO LOGIC ///////////////////////////////


console.log("Location JS loaded");

let options
var watchID, intervalID

// Initialize the map and some properties
$( document ).on('turbolinks:load', function() {
  
  var tile_layer = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
    attribution = 'Map data: &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors | &copy; TrackMe!',
    maxZoom = 19;

  L.tileLayer(tile_layer, {attribution, maxZoom}).addTo(map);
  map.options.scrollWheelZoom = true;
  map.options.doubleClickZoom = true;

  if(navigator.geolocation)
    navigator.geolocation.getCurrentPosition(myLocation);
  else
    map.setView([0, 0], 2);
})

// Send location to Server
window.sendLocation = function(){
  navigator.geolocation.getCurrentPosition(function(position){
    latlng.send_location(trip_id, position.coords.latitude, position.coords.longitude, looged_at); //looged_at. Halar el trip_id
    const num = Number(document.getElementById('db_log').textContent) + 1;
    document.getElementById('db_log').textContent = num;
    console.log('Send location to DataBase # ' + num);
  });
}


// Listening for click on Start/Pause Button and orquestrate the app
$( document ).on('turbolinks:load', function() {
  locations();
  var startPauseButton = document.getElementById('startPauseButton') 
  startPauseButton.textContent = "Start"



  //Adds event listener to the click on Start Button
  startPauseButton.addEventListener('click', function (event) { 

    if (startPauseButton.textContent === "Start") {
      console.log("START WAS PRESSED") // can be REMOVED
      startPauseButton.classList.remove("blueColor")
      startPauseButton.textContent = "Pause"
      startPauseButton.classList.add("yellowColor")
      intervalID = setInterval(function () {
        myLocation() ;
        sendLocation();
        }, 3000); 
    } else if  (startPauseButton.textContent === "Pause") {
      console.log("PAUSE WAS PRESSED") // can be REMOVED
      startPauseButton.classList.remove("yellowColor")
      startPauseButton.classList.add("blueColor")
      startPauseButton.textContent = "Start"
      clearInterval(intervalID);
    } 
  })

  var anotherButton = document.getElementById('anotherButton');
  anotherButton.addEventListener('click', function(event) {      
    location.reload();
  })
})


// Update the Map and Marker to current lcation constantly
window.myLocation = function(){
  navigator.geolocation.getCurrentPosition(function(position){ 
    console.log(position) // can be delted

    // Get Latitude and Longitude
    const nav_lat = position.coords.latitude,
          nav_lng = position.coords.longitude;

    const formLatitude = 'location_latitude' 
    const formLongitude = 'location_longitude'     

    console.log("latitude:" + nav_lat)  // can be REMOVED
    console.log("longitude:" + nav_lng)  // can be REMOVED

   document.getElementById(formLatitude).value =  nav_lat
   document.getElementById(formLongitude).value =   nav_lng 

    console.log("(Lat - Lng): " + convertDMS(nav_lat, nav_lng));
    document.getElementById('latlng').textContent = convertDMS(nav_lat, nav_lng);  // can be REMOVED

    map.setView([nav_lat, nav_lng], map.getZoom() ? map.getZoom() : 17);
    marker.setLatLng([nav_lat, nav_lng]);
  })
}


function error(err) {
  console.warn(`ERROR(${err.code}): ${err.message}`);
}


function convertDMS( lat, lng ) { 
  var convertLat = Math.abs(lat);
  var LatDeg = Math.floor(convertLat);
  var LatSeg = (convertLat - LatDeg) * 3600
  var LatMin = Math.floor(LatSeg / 60);
  LatSeg = Math.round(100*(LatSeg - (LatMin * 60)))/100;
  var LatCardinal = ((lat > 0) ? "N" : "S");
   
  var convertLng = Math.abs(lng);
  var LngDeg = Math.floor(convertLng);
  var LngSeg = (convertLng - LngDeg) * 3600
  var LngMin = Math.floor(LngSeg / 60);
  LngSeg = Math.round(100*(LngSeg - (LngMin * 60)))/100;
  var LngCardinal = ((lng > 0) ? "E" : "W");
   
  return LatDeg + 'º ' + LatMin + '′ ' + LatSeg + '″' + LatCardinal   + "  -  " + LngDeg + 'º ' + LngMin + '′ ' + LngSeg + '″' + LngCardinal;
}


// Fuction that get all Locations and filter them getting only the Latituda nd Longitude
window.locations = function(){
  var i
  var data = []
  var data2 = []

  var locations = gon.locations

  
    //document.getElementById('locations2').innerHTML = data2
    var data3 = locations.map(c => [c.latitude, c.longitude])

    var polyline = L.polyline(data3, {color: 'red'}).addTo(map)
    map.fitBounds(polyline.getBounds())

}




//var data2 = [[52.0623807,-1.3389535], [52.0632085,-1.3415552,]]


// data.push({lats, lngs});
   // data2.push([lats, lngs]);
   // //console.log(lat)
   // //console.log(lng)
   // console.log(data2)

   //var locationColected = JSON.stringify(data2, null, 4)
   //var latlngs = parseFloat(locationColected);
   //console.log(latlngs);
   //document.getElementById('locations2').innerHTML = latlngs

   //var polyline = L.polyline(latlngs, {color: 'red'}).addTo(map)
   // //map.fitBounds(polyline.getBounds())


   // document.getElementById('locations').textContent  = data
    // document.getElementById('locations').textContent  = data2
    //document.getElementById('locations').innerHTML = JSON.stringify(data, null, 4);
   
    //     // zoom the map to the polyline
    






////////////////////Checkking Data Sent  ////////////////////////////

// latlng.send_location(3, position.coords.latitude, position.coords.longitude)
// It shoul be done on console like

latlng.send_location(3, 50, -1)
//with datetime
latlng.send_location(1, 50.22, -1.44, 20200330) // the time will pull automatically







//////////////////// SOme code that helps to get the Lat, Lng values as an array //////////////////



var obj = {
    10: 'aa',
    11: 'bb'
};

var array = Object.keys( obj ).map(function( name ) {
    return [ +name ? +name : name, obj[ name ] ];
}).reduce(function( a, b ) {
    return a.concat(b);
});






var lab =["1","2","3"];
var val = [42,55,51,22];
var data = [];
for(var i=0; i<4; i++)  {
    data.push({label: lab[i], value: val[i]});
}


var locZero = locations[0]
var lat = locZero.latitude
var lng = locZero.longitude
// I might need this to make it sting => constructor.toString() or .toString()   https://www.w3schools.com/js/tryit.asp?filename=tryjs_array_isarray


var text = '{"employees":[' +
'{"firstName":"John","lastName":"Doe" },' +
'{"firstName":"Anna","lastName":"Smith" },' +
'{"firstName":"Peter","lastName":"Jones" }]}';

obj = JSON.parse(text);


var i;
for (i = 0; i < text.length; i++) {
  document.getElementById("demo").innerHTML +=
  obj.employees[i].firstName + " " + obj.employees[i].lastName + "<br>";
} 
















//////////////////// IMPORTANT CODE TO BE RUN WHEN DATA IS PUT ON JSON TO BE READ //////////////////
<h2>Create Object from JSON String</h2>

<p id="demo"></p>

<script>
var text = '{"employees":[' +
'{"firstName":"John","lastName":"Doe" },' +
'{"firstName":"Anna","lastName":"Smith" },' +
'{"firstName":"Peter","lastName":"Jones" }]}';

obj = JSON.parse(text);


var i;
for (i = 0; i < text.length; i++) {
  document.getElementById("demo").innerHTML +=
  obj.employees[i].firstName + " " + obj.employees[i].lastName + "<br>";
} 
</script>

Result:

Create Object from JSON String

John Doe
Anna Smith
Peter Jones


////////// ALL WITH ONE BUTTON ///////////////////////////////////

// Listening for click on Start/Pause Button and orquestrate the app
$( document ).on('turbolinks:load', function() {
  var startStopButton = document.getElementById('startStopButton') 
  startStopButton.textContent = "Start"
  //Adds event listener to the click on Start Button
  startStopButton.addEventListener('click', function (event) { 

    if (startStopButton.textContent === "Start") {
      console.log("START WAS PRESSED") // can be REMOVED
      startStopButton.textContent = "Stop"
      startStopButton.classList.add("redColor")
      intervalID = setInterval(function () {
        myLocation() ;
        sendLocation();
        }, 3000); 
    } else if  (startStopButton.textContent === "Stop") {
      console.log("STOP WAS PRESSED") // can be REMOVED
      startStopButton.classList.add("blueColor")
      startStopButton.textContent = "Start"
      clearInterval(intervalID);
    }
  })

  var anotherButton = document.getElementById('anotherButton');
  anotherButton.addEventListener('click', function(event) {      
    location.reload();
  })
})




////////////////////////////////////  GOOD STARTING BASE - PUSH LOCATION COORDINATES TO SERVER THROUGH JS ///////////////////////////////////



 console.log("Location JS loaded");
 
 let options
 var watchID, setIntervalID;
 
 // Initialize the map and some properties
 $( document ).on('turbolinks:load', function() {
   
   var tile_layer = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
     attribution = 'Map data: &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors | &copy; TrackMe!',
     maxZoom = 19;
 
   L.tileLayer(tile_layer, {attribution, maxZoom}).addTo(map);
   map.options.scrollWheelZoom = true;
   map.options.doubleClickZoom = true;
 
   if(navigator.geolocation)
     navigator.geolocation.getCurrentPosition(myLocation);
   else
     map.setView([0, 0], 2);
 })
 
 // Sets the watchPosition function
 window.setWatch = function() {    
     options ={
       enableHighAccuracy: false, // Do not use GPS as it will drain the battery. If GPS requiered set it to true
       timeout: 15000, // Will respond with an error after 5 seconds of no successful geolocation
       maximumAge: 0 // will not use cached results
     };
     watchID = navigator.geolocation.watchPosition(myLocation, error, options) // TO BE REMOVED 
     //console.log(coords.latitude)
     setIntervalID = setInterval(sendLocation, 3000);
     //setIntervalID = setInterval(myLocation, 3000);
 }
 
 // Send location to Server
 window.sendLocation = function(){
   navigator.geolocation.getCurrentPosition(function(position){
     latlng.send_location(position.coords.latitude, position.coords.longitude);
     const num = Number(document.getElementById('db_log').textContent) + 1;
     document.getElementById('db_log').textContent = num;
     console.log('Send location to DataBase # ' + num);
   });
 }
 
 
 // Functions that listen for click on start/stop Buttons and orquestrate the app
 $( document ).on('turbolinks:load', function() {
   var startButton = document.getElementById('startButton'); 
   startButton.addEventListener('click', function(event) { 
     setWatch() 
     console.log("START WAS PRESSED")    // can be REMOVED 
   })
 
   var stopButton = document.getElementById('stopButton');
   stopButton.addEventListener('click', function(event) {
     console.log("STOP WAS PRESSED") // can be REMOVED
     clearInterval(setIntervalID);
     navigator.geolocation.clearWatch(watchID) 
   })
 
   var anotherButton = document.getElementById('anotherButton');
   anotherButton.addEventListener('click', function(event) {      
     location.reload();
   })
 })
 
 // Update the Map and Marker to current lcation constantly
 window.myLocation = function(position){
     console.log(position) // can be delted
 
     // Get Latitude and Longitude
     const nav_lat = position.coords.latitude,
           nav_lng = position.coords.longitude;
 
     console.log(nav_lat)  // can be REMOVED
     console.log(nav_lng)  // can be REMOVED
 
     document.getElementById('latitude').textContent =  nav_lat
     document.getElementById('longitude').textContent =  nav_lng  
 
     console.log("(Lat - Lng): " + convertDMS(nav_lat, nav_lng));
     document.getElementById('latlng').textContent = convertDMS(nav_lat, nav_lng);  // can be REMOVED
 
     map.setView([nav_lat, nav_lng], map.getZoom() ? map.getZoom() : 17);
     marker.setLatLng([nav_lat, nav_lng]);
     
 
     //sendLocation()
  
 }
 
 function error(err) {
   console.warn(`ERROR(${err.code}): ${err.message}`);
 }
 
 
 
 function convertDMS( lat, lng ) { 
   var convertLat = Math.abs(lat);
   var LatDeg = Math.floor(convertLat);
   var LatSeg = (convertLat - LatDeg) * 3600
   var LatMin = Math.floor(LatSeg / 60);
   LatSeg = Math.round(100*(LatSeg - (LatMin * 60)))/100;
   var LatCardinal = ((lat > 0) ? "N" : "S");
    
   var convertLng = Math.abs(lng);
   var LngDeg = Math.floor(convertLng);
   var LngSeg = (convertLng - LngDeg) * 3600
   var LngMin = Math.floor(LngSeg / 60);
   LngSeg = Math.round(100*(LngSeg - (LngMin * 60)))/100;
   var LngCardinal = ((lng > 0) ? "E" : "W");
    
   return LatDeg + 'º ' + LatMin + '′ ' + LatSeg + '″' + LatCardinal   + "  -  " + LngDeg + 'º ' + LngMin + '′ ' + LngSeg + '″' + LngCardinal;
 }
 
 




/////////////////////////////////////////////////////////////////////////////////////////////////////////
 // has some updates on the last commit 


 console.log("Location JS loaded");

// Should be used to get user's current location  
//  window.alerty = function(){
//    //alert("COMENZAMOS")  
//   
//  }

// Set User's current Location
window.myLocation = function(){
  if(navigator.geolocation) {
  
    navigator.geolocation.getCurrentPosition(function (position) {
      console.log(position) // can be delted

      // Get Latitude and Longitude
      const nav_lat = position.coords.latitude,
          nav_lng = position.coords.longitude;

      document.getElementById('latitude').textContent =  nav_lat
      document.getElementById('longitude').textContent =  nav_lng

      console.log(nav_lat)
      console.log(nav_lng)

      console.log("(Lat - Lng): " + convertDMS(nav_lat, nav_lng));
      document.getElementById('latlng').textContent = convertDMS(nav_lat, nav_lng);

      map.setView([nav_lat, nav_lng], map.getZoom() ? map.getZoom() : 17);
      //var marker = L.marker([nav_lat,  nav_lng]).addTo(map)
      marker.setLatLng([nav_lat, nav_lng]);
    });
  }
}


  $('anotherButton').click(function() {
    location.reload();
  });

// // Functions that listen for click on start/stop Buttons and orquestrate the app
  $(function() {    
    let intervalID 
    let count = 0  // can be REMOVED

    //Adds event listener to the click on startStopButton
    var startButton = document.getElementById('startButton')    
    startButton.addEventListener('click', function (event) { 
      console.log("START WAS PRESSED")    // can be REMOVED       
      intervalID = setInterval(function () {
        myLocation() ;
        count += 1; // can be REMOVED
        console.log(count) // can be REMOVED
        }, 3000);
      })

    var stopButton = document.getElementById('stopButton');
    stopButton.addEventListener('click', function (event) {
      console.log("STOP WAS PRESSED") // can be REMOVED
      clearInterval(intervalID);
    })

    var anotherButton = document.getElementById('anotherButton');
    anotherButton.addEventListener('click', function (event) {      
      location.reload();
    })
  })

$( document ).on('turbolinks:load', function() {
  
  var tile_layer = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
    attribution = 'Map data: &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors | &copy; TrackMe!',
    maxZoom = 19;

  L.tileLayer(tile_layer, {attribution, maxZoom}).addTo(map);
  map.options.scrollWheelZoom = true;
  map.options.doubleClickZoom = true;

  if(navigator.geolocation)
    myLocation();
  else
    map.setView([0, 0], 2);
})


function convertDMS( lat, lng ) {
 
  var convertLat = Math.abs(lat);
  var LatDeg = Math.floor(convertLat);
  var LatSeg = (convertLat - LatDeg) * 3600
  var LatMin = Math.floor(LatSeg / 60);
  LatSeg = Math.round(100*(LatSeg - (LatMin * 60)))/100;
  var LatCardinal = ((lat > 0) ? "N" : "S");
   
  var convertLng = Math.abs(lng);
  var LngDeg = Math.floor(convertLng);
  var LngSeg = (convertLng - LngDeg) * 3600
  var LngMin = Math.floor(LngSeg / 60);
  LngSeg = Math.round(100*(LngSeg - (LngMin * 60)))/100;
  var LngCardinal = ((lng > 0) ? "E" : "W");
   
  return LatDeg + 'º ' + LatMin + '′ ' + LatSeg + '″' + LatCardinal   + "  -  " + LngDeg + 'º ' + LngMin + '′ ' + LngSeg + '″' + LngCardinal;
}




////////////////////////////////////////////////////////////////////////////////////////////////////////////





 // Should be used to get user's current location  
  window.alerty = function(){
    alert("COMENZAMOS")  
  }

// Adds Stop button properties(name, background-color)
  window.addStopButton = function(){
    // change the name of the button
    document.getElementById('startStopButton').innerHTML = "Stop"
    // change the background of the button startStopButton
    $('#startStopButton').addClass("redColor")
    console.log("RED WAS APPLIED")
  }

// Adds Start button properties(name, background-color)
  window.addStartButton = function(){
    // change the name of the button
    document.getElementById('startStopButton').innerHTML = "Start"
    // change the background of the button startStopButton
    // Remove the class redColor
    var element = document.getElementById('startStopButton');
    element.classList.remove("redColor");    
  }


// // Functions that listen for click on startStopButton and orquestrate the app
 $(function() {    


//
      var startStopButton = document.getElementById('startStopButton');
      startStopButton.addEventListener('click', function (event) {


        var start_stop = document.getElementById('startStopButton').innerHTML
         
        if ( start_stop === "Start" ) {
          console.log("START WAS PRESSED")          
          addStopButton()
          alerty()
          //alerting   

        } else if ( start_stop === "Stop" ) {
            addStartButton()
            console.log("STOP WAS PRESSED")


           //window.stopRed  = function(){
           //clearInterval(nIntervId);
           //}

    //stopRed()
          //  var stopRed  = function(){
          //     clearInterval(interval);
          //  }
            stopRed()
          //CCCCC
        }
      })
    //}
  })











































/////////// ADDS START STOP BUTTON - START DOES THE SAME AS LOG \\\\\\\\\\\\\\\\

if (navigator.geolocation) {
    console.log('geolocation is available');
    navigator.geolocation.getCurrentPosition(function(position) {   
      // initialize the map on the "map" div with a given center and zoom
      const map = L.map('trackmap').setView([0, 0], 1);   

      // Required by leaflet to use it
      const attribution = 'Map data: &copy; <a href=""https://www.openstreetmap.org/"">OpenStreetMap</a> contributors | &copy; Trackmi ';
      const tileURL = "http://{s}.tile.osm.org/{z}/{x}/{y}.png";
      const maxZoom = 19;
      const tiles = L.tileLayer( tileURL , {attribution, maxZoom});
      tiles.addTo(map);  

      $(function() {
      // Listen for click on Log button
      const log = document.getElementById('log');
      const startStopButton = document.getElementById('startStopButton');

      if (startStopButton || log){
        this.addEventListener('click', function (event) {
          
          //navigator.geolocation.getCurrentPosition(function(position) { 
          const lat = position.coords.latitude
          const lon = position.coords.longitude
          console.log(lat)


          document.getElementById('latitude').textContent = lat
          document.getElementById('longitude').textContent = lon

          // add marker to map with the coordinates
          var marker = L.marker([lat, lon]).addTo(map)

          // set the view to the lat, lon coordinates and zoom it.
          map.setView([lat, lon], 17)
          })
       }
      })
        })
  } else {
    console.log('geolocation IS NOT available');
  }




/////////////////////////////////////////////////////////////////

//// Ultimo enviado a Mario \\\\\\\
$(function() {

  if (navigator.geolocation) {
    console.log('geolocation is available');
    //navigator.geolocation.getCurrentPosition(function(position) {   
      // initialize the map on the "map" div with a given center and zoom
      const map = L.map('trackmap').setView([0, 0], 1);   

      // Required by leaflet to use it
      const attribution = 'Map data: &copy; <a href=""https://www.openstreetmap.org/"">OpenStreetMap</a> contributors | &copy; Trackmi ';
      const tileURL = "http://{s}.tile.osm.org/{z}/{x}/{y}.png";
      const maxZoom = 19;
      const tiles = L.tileLayer( tileURL , {attribution, maxZoom});
      tiles.addTo(map);  


      // Listen for click on Log button
      const log = document.getElementById('log');
      log.addEventListener('click', function (event) {
        
        navigator.geolocation.getCurrentPosition(function(position) { 
        const lat = position.coords.latitude
        const lon = position.coords.longitude
        console.log(lat)


        document.getElementById('latitude').textContent = lat
        document.getElementById('longitude').textContent = lon

        // add marker to map with the coordinates
        var marker = L.marker([lat, lon]).addTo(map)

        // set the view to the lat, lon coordinates and zoom it.
        map.setView([lat, lon], 17)
        })
      })

  } else {
    console.log('geolocation IS NOT available');
  }

});


/////////////////////////////////////////////////












//////////////  GOING STEP BY STPE \\\\\\\\\\\\\\\\\\
$( document ).ready(function() {
  if ("geolocation" in navigator) { 
    console.log('geolocation is available');  

    //const map = L.map('trackmap').setView([0, 0], 1);  
    //// Required by leaflet to use it
    //const attribution = 'Map data: &copy; <a href=""https://www.openstreetmap.org/"">OpenStreetMap</a> contributors | &copy; Trackmi ';
    //const tileURL = "http://{s}.tile.osm.org/{z}/{x}/{y}.png";
    //const maxZoom = 19;
    //const tiles = L.tileLayer( tileURL , {attribution, maxZoom});
    //tiles.addTo(map); 



    navigator.geolocation.getCurrentPosition(function(position) { 
      const lat = position.coords.latitude
      const lon = position.coords.longitude
      document.getElementById('latitude').textContent = lat
      document.getElementById('longitude').textContent = lon
      console.log(lat);
      console.log(lon);
    })


    var log = document.getElementById('log');
    log.addEventListener('click', function (event) {
    
    alert('clicked !!')
    })

    //})
  } else {
    console.log('geolocation IS NOT available');
  }

})

//////////////////////////////////////////////////////////////////





// NO WORKING \\


if (navigator.geolocation) {
  console.log('geolocation is available');
  $( document ).ready(function() {
    
    // initialize the map on the "map" div with a given center and zoom
    const map = L.map('trackmap').setView([0, 0], 1);   
  

      // Required by leaflet to use it
      const attribution = 'Map data: &copy; <a href=""https://www.openstreetmap.org/"">OpenStreetMap</a> contributors | &copy; Trackmi ';
      const tileURL = "http://{s}.tile.osm.org/{z}/{x}/{y}.png";
      const maxZoom = 19;
      const tiles = L.tileLayer( tileURL , {attribution, maxZoom});
      tiles.addTo(map);    

      

      navigator.geolocation.getCurrentPosition(function(position) {
        const log = document.getElementById('log');
        log.addEventListener('click', function (event) {

          alert("CLICKED")

          const lat = position.coords.latitude
          const lon = position.coords.longitude
          document.getElementById('latitude').textContent = lat
          document.getElementById('longitude').textContent = lon

          // add marker to map with the coordinates
          var marker = L.marker([lat, lon]).addTo(map)

          // set the view to the lat, lon coordinates and zoom it.
          map.setView([lat, lon], 17)

        });
      })
  })
  


} else {
  console.log('geolocation IS NOT available');
}



//////////////////////////////////////////////////










if (navigator.geolocation) {
  console.log('geolocation is available');
  $( document ).ready(function() {
    //navigator.geolocation.getCurrentPosition(function(position) {
      const map = L.map('trackmap').setView([0, 0], 1);   

      // Required by leaflet to use it
      const attribution = 'Map data: &copy; <a href=""https://www.openstreetmap.org/"">OpenStreetMap</a> contributors | &copy; Trackmi ';
      const tileURL = "http://{s}.tile.osm.org/{z}/{x}/{y}.png";
      const maxZoom = 19;
      const tiles = L.tileLayer( tileURL , {attribution, maxZoom});
      tiles.addTo(map);    
    //})

    var log = document.getElementById('log');
    log.addEventListener('click', function (event) {
      alert("BUTTON CLICKED !!!!")
    })
  })


} else {
  console.log('geolocation IS NOT available');
}


//////////////////// THIS WORKS- SHOWS THE ALERT - CAN NOT ADD THE NAVIGATOR.GEOLOCATION.GET CURRENTPOSISTION FUNCTION \\\\\\\\\\\


$( document ).ready(function() {
      const map = L.map('trackmap').setView([0, 0], 1);   

      // Required by leaflet to use it
      const attribution = 'Map data: &copy; <a href=""https://www.openstreetmap.org/"">OpenStreetMap</a> contributors | &copy; Trackmi ';
      const tileURL = "http://{s}.tile.osm.org/{z}/{x}/{y}.png";
      const maxZoom = 19;
      const tiles = L.tileLayer( tileURL , {attribution, maxZoom});
      tiles.addTo(map);    
    

      if (navigator.geolocation) {
        console.log('geolocation is available');
          //navigator.geolocation.getCurrentPosition(function(position) {
          var log = document.getElementById('log');
          log.addEventListener('click', function (event) {
            alert("BUTTON CLICKED !!!!")
          })
      } else {
        console.log('geolocation IS NOT available');
      }
    })  







/////////////////     ORIGINAL \\\\\\\\\\\\\\\\\\\\\\\

if (navigator.geolocation) {
  console.log('geolocation is available');
  navigator.geolocation.getCurrentPosition(function(position) {   
    // initialize the map on the "map" div with a given center and zoom
    const map = L.map('trackmap').setView([0, 0], 1);   

    // Required by leaflet to use it
    const attribution = 'Map data: &copy; <a href=""https://www.openstreetmap.org/"">OpenStreetMap</a> contributors | &copy; Trackmi ';
    const tileURL = "http://{s}.tile.osm.org/{z}/{x}/{y}.png";
    const maxZoom = 19;
    const tiles = L.tileLayer( tileURL , {attribution, maxZoom});
    tiles.addTo(map);  
    // Listen for click on Log button
    const log = document.getElementById('log');
    log.addEventListener('click', function (event) {
      const lat = position.coords.latitude
      const lon = position.coords.longitude
      document.getElementById('latitude').textContent = lat
      document.getElementById('longitude').textContent = lon

      // add marker to map with the coordinates
      var marker = L.marker([lat, lon]).addTo(map)

      // set the view to the lat, lon coordinates and zoom it.
      map.setView([lat, lon], 17)

    });
  });
} else {
  console.log('geolocation IS NOT available');
}

////////////////////////////////////////////////////////////////////////////////////////////


LATEST USING WATCHPOSITION WORKING


console.log("Location JS loaded");

let options
var watchID

// Initialize the map
$( document ).on('turbolinks:load', function() {
  
  var tile_layer = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
    attribution = 'Map data: &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors | &copy; TrackMe!',
    maxZoom = 19;

  L.tileLayer(tile_layer, {attribution, maxZoom}).addTo(map);
  map.options.scrollWheelZoom = true;
  map.options.doubleClickZoom = true;

  if(navigator.geolocation)
    navigator.geolocation.getCurrentPosition(myLocation);
  else
    map.setView([0, 0], 2);
})

window.setWatch = function() {    
    options ={
      enableHighAccuracy: false, // Do not use GPS as it will drain the battery
      timeout: 5000, // Will respond with an error after 5 seconds of no successful geolocation
      maximumAge: 0 // will not use cached results
    };
    watchID = navigator.geolocation.watchPosition(myLocation, error, options)
}

// Functions that listen for click on  Buttons and orquestrate the app
$( document ).on('turbolinks:load', function() {
  var startButton = document.getElementById('startButton'); 
  startButton.addEventListener('click', function(event) { 
    setWatch() 
    console.log("START WAS PRESSED")    // can be REMOVED 
    
      //myLocation();
    })

  var stopButton = document.getElementById('stopButton');
  stopButton.addEventListener('click', function(event) {
    console.log("STOP WAS PRESSED") // can be REMOVED
    navigator.geolocation.clearWatch(watchID) 
  })

  var anotherButton = document.getElementById('anotherButton');
  anotherButton.addEventListener('click', function(event) {      
    location.reload();
  })
})



// Update the Map and Marker
window.myLocation = function(position){
    console.log(position) // can be delted

    // Get Latitude and Longitude
    const nav_lat = position.coords.latitude,
          nav_lng = position.coords.longitude;

    console.log(nav_lat) // can be delted
    console.log(nav_lng) // can be delted

    document.getElementById('latitude').textContent =  nav_lat
    document.getElementById('longitude').textContent =  nav_lng  

    console.log("(Lat - Lng): " + convertDMS(nav_lat, nav_lng));
    document.getElementById('latlng').textContent = convertDMS(nav_lat, nav_lng);

    map.setView([nav_lat, nav_lng], map.getZoom() ? map.getZoom() : 17);
    //var marker = L.marker([nav_lat,  nav_lng]).addTo(map)
    marker.setLatLng([nav_lat, nav_lng]);
 
}

//function error(err) {
//console.warn(`ERROR(${err.code}): ${err.message}`);
//}

function error(err)  {
   // err is a number
  let errors = {
    1: 'User denied permission',
    2: 'Unable to get Geolocation',
    3: 'Took to long - It timed out'
  }
 document.querySelector('h1').textContent = errors[err]
}



function convertDMS( lat, lng ) { 
  var convertLat = Math.abs(lat);
  var LatDeg = Math.floor(convertLat);
  var LatSeg = (convertLat - LatDeg) * 3600
  var LatMin = Math.floor(LatSeg / 60);
  LatSeg = Math.round(100*(LatSeg - (LatMin * 60)))/100;
  var LatCardinal = ((lat > 0) ? "N" : "S");
   
  var convertLng = Math.abs(lng);
  var LngDeg = Math.floor(convertLng);
  var LngSeg = (convertLng - LngDeg) * 3600
  var LngMin = Math.floor(LngSeg / 60);
  LngSeg = Math.round(100*(LngSeg - (LngMin * 60)))/100;
  var LngCardinal = ((lng > 0) ? "E" : "W");
   
  return LatDeg + 'º ' + LatMin + '′ ' + LatSeg + '″' + LatCardinal   + "  -  " + LngDeg + 'º ' + LngMin + '′ ' + LngSeg + '″' + LngCardinal;
}

//////////////////////////////////////////////////////////////////////////////////


